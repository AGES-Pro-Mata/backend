#!/bin/bash
# Script de limpeza segura da EC2 - Remove containers DEV preservando volumes
# Uso: bash scripts/cleanup-dev-ec2.sh

set -euo pipefail

echo "üßπ Limpeza segura da EC2 - Removendo containers DEV"
echo "=================================================="
echo ""

# Lista de containers DEV que podem ser removidos com seguran√ßa
DEV_CONTAINERS=(
  "backend-dev"
  "promata-backend-dev"
)

echo "üìã Containers DEV que ser√£o removidos (se existirem):"
for container in "${DEV_CONTAINERS[@]}"; do
  echo "  - $container"
done
echo ""

# Parar e remover containers DEV
echo "‚è∏Ô∏è  Parando containers DEV..."
for container in "${DEV_CONTAINERS[@]}"; do
  if docker ps -a --format '{{.Names}}' | grep -q "^${container}$"; then
    echo "  Parando: $container"
    docker stop "$container" 2>/dev/null || true
    echo "  Removendo: $container"
    docker rm "$container" 2>/dev/null || true
  else
    echo "  ‚è≠Ô∏è  $container n√£o encontrado (j√° removido)"
  fi
done

echo ""
echo "üóëÔ∏è  Limpando imagens Docker n√£o utilizadas..."
# Remove apenas imagens dangling (sem tag) e n√£o utilizadas h√° mais de 24h
docker image prune -f --filter "until=24h" || true

echo ""
echo "üìä Verificando volumes (N√ÉO ser√£o removidos)..."
echo "Volumes existentes:"
docker volume ls --format "table {{.Name}}\t{{.Driver}}\t{{.Scope}}"

echo ""
echo "üìä Containers em execu√ß√£o ap√≥s limpeza:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo "üíæ Uso de disco:"
df -h / | grep -v Filesystem

echo ""
echo "‚úÖ Limpeza conclu√≠da!"
echo ""
echo "‚ÑπÔ∏è  Observa√ß√µes:"
echo "  - Volumes de dados foram PRESERVADOS"
echo "  - Containers de PROD continuam rodando"
echo "  - Imagens antigas (>24h) foram removidas"
echo ""
echo "Para liberar mais espa√ßo (CUIDADO - remove volumes n√£o utilizados):"
echo "  docker volume prune -f"
echo ""
