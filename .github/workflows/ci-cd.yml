name: Backend CI/CD

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME_BASE: norohim/pro-mata-backend

jobs:
  # Job 1: Testes e Qualidade (permanece o mesmo)
  test:
    name: Tests & Quality
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations and tests
        run: |
          npx prisma generate
          npx prisma migrate deploy
          # Adicione seus comandos de teste aqui
          npm test || echo "Test command failed or not found, continuing..."
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  # Job 2: Build Dinâmico da Imagem Docker
  build-and-push:
    name: 📦 Build & Push Dynamic Image
    needs: [test]
    runs-on: ubuntu-latest
    # Condição para executar o build apenas em eventos de push ou dispatch
    if: >-
      success() && (
        (github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main')) ||
        github.event_name == 'workflow_dispatch'
      )
    outputs:
      image_name: ${{ steps.config.outputs.image_name }}
      event_type: ${{ steps.config.outputs.event_type }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Set Dynamic Configuration
        id: config
        run: |
          # Determina o ambiente baseado no gatilho do workflow
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            # Para 'push', determina pela branch
            if [ "${{ github.ref_name }}" = "main" ]; then
              ENV="prod"
            else
              ENV="dev"
            fi
          fi
          
          echo "Determined Environment: $ENV"

          # Define as variáveis baseadas no ambiente
          if [ "$ENV" = "prod" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "dockerfile=Dockerfile.prod" >> $GITHUB_OUTPUT
            echo "image_name=${{ env.IMAGE_NAME_BASE }}" >> $GITHUB_OUTPUT
            echo "event_type=deploy-prod-backend" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "dockerfile=Dockerfile.dev" >> $GITHUB_OUTPUT
            echo "image_name=${{ env.IMAGE_NAME_BASE }}-dev" >> $GITHUB_OUTPUT
            echo "event_type=deploy-dev-backend" >> $GITHUB_OUTPUT
          fi

      - name: Create .env file
        run: |
          if [ "${{ steps.config.outputs.environment }}" = "production" ]; then
            echo "${{ secrets.ENV_PROD }}" > .env
          else
            echo "${{ secrets.ENV_DEV }}" > .env
          fi
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.config.outputs.image_name }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-
            # Adiciona tag de versão apenas para produção
            type=raw,value=v${{ github.run_number }},enable=${{ steps.config.outputs.environment == 'production' }}

      - name: Build and push image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ steps.config.outputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          
      - name: Print Image Digest
        run: echo "Image pushed with digest ${{ steps.docker_build.outputs.digest }}"

  # Job 3: Disparo do Deploy de Infraestrutura
  trigger-deploy:
    name: 🚀 Trigger Infrastructure Deployment
    needs: [build-and-push]
    runs-on: ubuntu-latest
    # Garante que este job só rode se o build for bem-sucedido
    if: success() && needs.build-and-push.outputs.event_type != ''
    steps:
      - name: Dispatch to Infrastructure Repository
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_INFRASTRUCTURE_REPO }}
          repository: AGES-Pro-Mata/infrastructure
          event-type: ${{ needs.build-and-push.outputs.event_type }}
          client-payload: |
            {
              "image": "${{ needs.build-and-push.outputs.image_name }}:latest",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "triggered_by": "backend"
            }