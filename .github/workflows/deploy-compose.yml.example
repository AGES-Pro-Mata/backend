# Exemplo de CI/CD usando Docker Compose
# Para usar: renomeie para deploy-compose.yml e configure os secrets

name: Deploy com Docker Compose

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '24'
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: norohim/pro-mata-backend

jobs:
  deploy-prod-compose:
    name: Deploy Production (Docker Compose)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.PROD_EC2_USER }}
          key: ${{ secrets.PROD_EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            # Navegar para diretório do projeto
            cd ~/promata-backend || {
              echo "Criando diretório do projeto..."
              mkdir -p ~/promata-backend
              cd ~/promata-backend
            }

            # Fazer pull do repositório ou atualizar
            if [ -d ".git" ]; then
              echo "Atualizando repositório..."
              git fetch origin
              git reset --hard origin/main
            else
              echo "Clonando repositório..."
              git clone https://github.com/AGES-Pro-Mata/backend.git .
            fi

            # Criar/atualizar arquivo .env com secrets
            cat > .env.production << EOF
            # Docker
            DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            IMAGE_TAG=latest
            CONTAINER_NAME=promata-backend

            # Database
            DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
            POSTGRES_DB=promata
            POSTGRES_USER=admin
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

            # JWT
            JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
            JWT_EXPIRES_IN=2h

            # AWS
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_S3_REGION=${{ vars.AWS_REGION }}
            AWS_S3_BUCKET=${{ secrets.PROD_AWS_S3_BUCKET }}

            # Traefik
            ACME_EMAIL=${{ vars.ACME_EMAIL }}
            TRAEFIK_LOG_LEVEL=INFO

            # App
            NODE_ENV=production
            PORT=3000
            EOF

            # Usar .env.production
            cp .env.production .env

            # Pull das imagens mais recentes
            echo "Atualizando imagens Docker..."
            docker-compose -f docker-compose.prod.yml pull

            # Parar serviços
            echo "Parando serviços..."
            docker-compose -f docker-compose.prod.yml down || true

            # Iniciar serviços
            echo "Iniciando serviços..."
            docker-compose -f docker-compose.prod.yml up -d

            # Aguardar serviços subirem
            sleep 15

            # Executar migrations
            echo "Executando migrations..."
            docker-compose -f docker-compose.prod.yml exec -T backend npx prisma migrate deploy || echo "Migrations já aplicadas"

            # Verificar status
            echo "Status dos serviços:"
            docker-compose -f docker-compose.prod.yml ps

            # Limpar imagens antigas
            echo "Limpando imagens antigas..."
            docker image prune -af --filter "until=24h" || true

            echo "✅ Deploy concluído!"
