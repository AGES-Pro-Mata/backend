# Docker Compose para Ambiente de Desenvolvimento
# Apenas Backend + Database
# Uso: docker compose -f docker-compose.dev.yml --env-file .env.dev up -d

services:
  # PostgreSQL Database
  # Usa imagem customizada publicada pelo CI/CD (branch dev)
  database:
    image: ${DATABASE_IMAGE:-norohim/pro-mata-database-dev}:${DATABASE_TAG:-latest}
    container_name: promata-dev-database
    restart: unless-stopped

    environment:
      - POSTGRES_DB=${POSTGRES_DB:-promata}
      - POSTGRES_USER=${POSTGRES_USER:-promata}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-promata123postgres}

    ports:
      - "${DATABASE_PORT_MAPPING:-5431:5432}"

    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d

    networks:
      - promata_dev

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-promata} -d ${POSTGRES_DB:-promata}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend NestJS (Development Mode)
  # Usa imagem publicada pelo CI/CD (branch dev â†’ norohim/pro-mata-backend-dev:latest)
  backend:
    image: ${DOCKER_REGISTRY:-docker.io}/${IMAGE_NAME:-norohim/pro-mata-backend-dev}:${IMAGE_TAG:-latest}
    container_name: ${CONTAINER_NAME:-promata-dev-backend}
    restart: unless-stopped

    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${BACKEND_PORT:-3010}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - UMAMI_URL=${UMAMI_URL:-}
      - UMAMI_WEBSITE_ID=${UMAMI_WEBSITE_ID:-}

    ports:
      - "${BACKEND_PORT:-3010}:3010"

    networks:
      - promata_dev

    depends_on:
      database:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prisma Studio
  prisma-studio:
    image: node:18-alpine
    container_name: promata-dev-prisma-studio
    restart: unless-stopped

    environment:
      - DATABASE_URL=${DATABASE_URL}

    ports:
      - "5555:5555"

    volumes:
      - .:/app
      - backend_node_modules:/app/node_modules

    working_dir: /app

    command: sh -c "npx prisma migrate deploy && npx prisma studio --hostname 0.0.0.0 --port 5555"

    depends_on:
      database:
        condition: service_healthy

    networks:
      - promata_dev

volumes:
  backend_node_modules:
    name: promata-dev-backend-node-modules
  postgres_dev_data:
    name: promata-dev-postgres-data

networks:
  promata_dev:
    name: promata-dev-network
    driver: bridge
