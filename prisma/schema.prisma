// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  userType           UserType
  name               String
  email              String               @unique
  password           String
  phone              String
  document           String?              @unique
  gender             String
  rg                 String?              @unique
  institution        String?
  isForeign          Boolean
  active             Boolean              @default(true)
  verified           Boolean
  address            Address?             @relation(fields: [addressId], references: [id])
  addressId          String?              @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PasswordResetToken PasswordResetToken[]
  Receipt            Receipt[]
  Reservation        Reservation[]
  createdBy          User?                @relation("createdBy", fields: [createdByUserId], references: [id])
  createdByUserId    String?
  User               User[]               @relation("createdBy")
  Requests           Requests[]
}

enum UserType {
  ADMIN
  ROOT
  GUEST
  PROFESSOR
}

model Address {
  id        String   @id @default(uuid())
  street    String?
  number    String?
  city      String?
  zip       String?
  country   String
  user      User?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiredAt DateTime
  createdAt DateTime
  isActive  Boolean  @default(true)
}

model Receipt {
  id        String        @id @default(uuid())
  type      ReceiptType
  createdAt DateTime      @default(now())
  value     Decimal?
  status    ReceiptStatus @default(PENDING)
  url       String
  user      User          @relation(fields: [userId], references: [id])
  userId    String
}

enum ReceiptStatus {
  PENDING
  ACTIVE
  EXPIRED
}

enum ReceiptType {
  PAYMENT
  DOCENCY
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TrailDifficulty {
  LIGHT
  MODERATED
  HEAVY
  EXTREME
}

enum Category {
  TRAIL
  HOSTING
  LABORATORY
  EVENT
}

model Image {
  id         String       @id @default(uuid())
  url        String       @unique
  active     Boolean      @default(true)
  Experience Experience[]
}

model Experience {
  id              String           @id @default(uuid())
  name            String
  description     String
  category        Category
  capacity        Int
  image           Image?           @relation(fields: [imageId], references: [id])
  startDate       DateTime?
  endDate         DateTime?
  price           Decimal?
  weekDays        WeekDay[]
  durationMinutes Int?
  trailDifficulty TrailDifficulty?
  trailLength     Float?
  imageId         String?
  active          Boolean
  Reservation     Reservation[]
}

model Reservation {
  id              String           @id @default(uuid())
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  experience      Experience       @relation(fields: [experienceId], references: [id])
  experienceId    String
  startDate       DateTime?
  endDate         DateTime?
  status          String?
  notes           String?
  createdAt       DateTime         @default(now())
  Requests        Requests[]
}

model Requests {
  id        String        @id @default(uuid())
  type      RequestType
  createdAt DateTime      @default(now())
  createdBy User          @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  description String?
  reservation Reservation? @relation(fields: [reservationId], references: [id])
  reservationId String?
}

enum RequestType {
  CREATED
  CANCELED
  CANCELED_REQUESTED
  EDITED
  REJECTED
  APPROVED
  PEOPLE_REQUESTED
  PAYMENT_REQUESTED
  PEOPLE_SENT
  PAYMENT_SENT
}