# Dockerfile.prod - Build otimizado para produção

# -----------------------------
# Build stage
# -----------------------------
FROM node:24-alpine AS build

# Instalar dependências do sistema necessárias durante o build
RUN apk add --no-cache openssl libc6-compat python3 make g++

WORKDIR /app

# Copiar arquivos de dependências primeiro para aproveitar cache
COPY package*.json ./
COPY prisma ./prisma/

# Instalar dependências (incluindo devDependencies para build)
RUN npm ci

# Copiar código fonte
COPY . .

# Gerar Prisma Client e build da aplicação
RUN npx prisma generate
RUN npm run build

# -----------------------------
# Runtime stage
# -----------------------------
FROM node:24-alpine AS runtime

# Instalar dependências do sistema necessárias em runtime
RUN apk add --no-cache openssl libc6-compat curl

# Criar usuário não-root por segurança
RUN addgroup -g 1001 -S nodejs \
  && adduser -S nestjs -u 1001

WORKDIR /app

# Copiar apenas artefatos necessários da etapa de build
COPY --from=build --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nestjs:nodejs /app/dist ./dist
COPY --from=build --chown=nestjs:nodejs /app/prisma ./prisma
COPY --from=build --chown=nestjs:nodejs /app/generated ./generated
COPY --from=build --chown=nestjs:nodejs /app/package*.json ./

# Variáveis de ambiente padrão de produção
ENV NODE_ENV=production
ENV PORT=3001

EXPOSE 3001

# Mudar para usuário não-root
USER nestjs

# Comando de inicialização direto (Prisma Client gerado no build stage)
CMD ["node", "dist/main.js"]