# Dockerfile.prod - Build otimizado para produ√ß√£o
# Build stage
FROM node:20-alpine AS build

# Labels para metadados
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION
LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="pro-mata-backend" \
      org.label-schema.description="Pro-Mata Backend Application" \
      org.label-schema.url="https://promata.ages.pucrs.br" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/AGES-Pro-Mata/backend" \
      org.label-schema.vendor="AGES PUCRS" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0"

# Instalar depend√™ncias do sistema
RUN apk add --no-cache openssl libc6-compat

WORKDIR /app

# Copiar package files
COPY package*.json ./
COPY prisma ./prisma/

# Instalar todas as depend√™ncias (incluindo dev para build)
RUN npm ci

# Gerar cliente Prisma
RUN npx prisma generate

# Copiar c√≥digo fonte
COPY . .

# Build da aplica√ß√£o
RUN npm run build

# Runtime stage
FROM node:20-alpine AS runtime

# Instalar depend√™ncias do sistema
RUN apk add --no-cache openssl libc6-compat curl netcat-openbsd

# Criar usu√°rio n√£o-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

WORKDIR /app

# Copiar node_modules e build da etapa anterior
COPY --from=build --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nestjs:nodejs /app/dist ./dist
COPY --from=build --chown=nestjs:nodejs /app/prisma ./prisma
COPY --from=build --chown=nestjs:nodejs /app/generated ./generated
COPY --chown=nestjs:nodejs package*.json ./

# Definir vari√°veis de ambiente
ENV NODE_ENV=production
ENV PORT=3000

# Criar diret√≥rios necess√°rios
RUN mkdir -p /app/logs && chown -R nestjs:nodejs /app/logs

# Mudar para usu√°rio n√£o-root
USER nestjs

# Expor porta
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Script de inicializa√ß√£o - apenas aplica√ß√£o
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'set -e' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'echo "üöÄ Pro-Mata Backend Starting..."' >> /app/start.sh && \
    echo 'echo "Environment: ${NODE_ENV:-production}"' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Aguardar banco ficar dispon√≠vel via pgbouncer' >> /app/start.sh && \
    echo 'echo "‚è≥ Aguardando banco de dados..."' >> /app/start.sh && \
    echo 'until nc -z ${DB_HOST:-pgbouncer} ${DB_PORT:-6432}; do' >> /app/start.sh && \
    echo '    echo "   Banco n√£o dispon√≠vel, tentando novamente..."' >> /app/start.sh && \
    echo '    sleep 2' >> /app/start.sh && \
    echo 'done' >> /app/start.sh && \
    echo 'echo "‚úÖ Banco de dados dispon√≠vel!"' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Verificar conectividade simples com Prisma' >> /app/start.sh && \
    echo 'if ! node -e "' >> /app/start.sh && \
    echo 'const { PrismaClient } = require('\''@prisma/client'\'');' >> /app/start.sh && \
    echo 'new PrismaClient().$connect()' >> /app/start.sh && \
    echo '  .then(() => console.log('\''‚úÖ Prisma conectado'\''))' >> /app/start.sh && \
    echo '  .catch(e => {' >> /app/start.sh && \
    echo '    console.error('\''‚ùå Erro Prisma:'\'', e.message);' >> /app/start.sh && \
    echo '    process.exit(1);' >> /app/start.sh && \
    echo '  })' >> /app/start.sh && \
    echo '"; then' >> /app/start.sh && \
    echo '    echo "‚ùå Falha na conex√£o com banco"' >> /app/start.sh && \
    echo '    exit 1' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'echo "üéØ Iniciando aplica√ß√£o NestJS..."' >> /app/start.sh && \
    echo 'exec node dist/main.js' >> /app/start.sh && \
    chmod +x /app/start.sh

# Comando de inicializa√ß√£o - apenas aplica√ß√£o (sem migrations)
CMD ["/app/start.sh"]