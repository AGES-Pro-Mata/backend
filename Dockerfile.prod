# Dockerfile.prod - Build otimizado para produção

# -----------------------------
# Dependencies stage
# -----------------------------
FROM node:24-alpine AS deps

RUN apk add --no-cache openssl libc6-compat

WORKDIR /app

# Copiar apenas arquivos de dependências
COPY package*.json ./
COPY prisma ./prisma/

# Instalar APENAS dependências de produção
RUN npm ci --only=production && npm cache clean --force

# -----------------------------
# Build stage
# -----------------------------
FROM node:24-alpine AS build

RUN apk add --no-cache openssl libc6-compat python3 make g++

WORKDIR /app

# Copiar arquivos de dependências
COPY package*.json ./
COPY prisma ./prisma/

# Instalar TODAS as dependências (incluindo dev)
RUN npm ci && npm cache clean --force

# Copiar código fonte
COPY . .

# Gerar Prisma Client e build
RUN npx prisma generate
RUN npm run build

# Remover devDependencies após build
RUN npm prune --production

# -----------------------------
# Runtime stage (imagem final menor)
# -----------------------------
FROM node:24-alpine AS runtime

RUN apk add --no-cache openssl libc6-compat curl

# Criar usuário não-root
RUN addgroup -g 1001 -S nodejs \
  && adduser -S nestjs -u 1001

WORKDIR /app

# Copiar apenas node_modules de produção do stage deps
COPY --from=deps --chown=nestjs:nodejs /app/node_modules ./node_modules

# Copiar artefatos de build
COPY --from=build --chown=nestjs:nodejs /app/dist ./dist
COPY --from=build --chown=nestjs:nodejs /app/prisma ./prisma

# Copiar Prisma Client gerado (pode estar em node_modules/.prisma ou generated/)
COPY --from=build --chown=nestjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma

COPY --chown=nestjs:nodejs package*.json ./

ENV NODE_ENV=production
ENV PORT=3001

EXPOSE 3001

USER nestjs

HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

CMD ["node", "dist/main.js"]