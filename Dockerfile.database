# Pro-Mata Base Database Container with PostgreSQL and Prisma Migration
FROM postgres:16-alpine

# Metadata labels
LABEL org.label-schema.name="pro-mata-database-base" \
      org.label-schema.description="Base PostgreSQL image with Prisma migration support for Pro-Mata" \
      org.label-schema.vendor="AGES PUCRS" \
      org.label-schema.version="16-alpine-base"

# Install Node.js for Prisma migrations and additional tools
RUN apk add --no-cache \
    nodejs \
    npm \
    postgresql-client \
    postgresql-contrib \
    openssl \
    libc6-compat \
    netcat-openbsd \
    curl \
    bash \
    tzdata \
    gzip \
    procps

# Set timezone to Brazil
RUN cp /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime && \
    echo "America/Sao_Paulo" > /etc/timezone

# Set default PGDATA location (can be overridden)
ENV PGDATA=/var/lib/postgresql/data/pgdata
ENV TZ=America/Sao_Paulo
ENV PGTZ=America/Sao_Paulo

# Create app directory for migration scripts
WORKDIR /app

# Copy package files and prisma schema
COPY package*.json ./
COPY prisma ./prisma/

# Install only production dependencies needed for migrations
RUN npm ci --only=production && npm cache clean --force

# CORRE√á√ÉO: Adicionar try-catch para prisma generate
RUN npx prisma generate || echo "‚ö†Ô∏è  Prisma generate failed during build, will retry at runtime"

# Create basic initialization script (database-specific initialization to be handled by extending images)
COPY <<'EOF' /docker-entrypoint-initdb.d/00-base-init.sh
#!/bin/bash
set -e

echo "üöÄ Pro-Mata Base Database Initialization"
echo "Timestamp: $(date)"
echo "PostgreSQL Version: $(postgres --version)"
echo "Timezone: $(date +'%Z %z')"

# Create directory structure for extensibility
mkdir -p /var/lib/postgresql/scripts
mkdir -p /var/lib/postgresql/backups
mkdir -p /etc/postgresql/conf.d

# Set proper permissions
chown -R postgres:postgres /var/lib/postgresql/scripts
chown -R postgres:postgres /var/lib/postgresql/backups

echo "‚úÖ Base database initialization completed!"
EOF

# Create improved migration script
COPY <<'EOF' /app/migrate.sh
#!/bin/bash
set -e

echo "üîÑ Pro-Mata Database Migration Tool"
echo "Environment: ${NODE_ENV:-development}"
echo "Database Host: ${POSTGRES_HOST:-localhost}"
echo "Database Port: ${POSTGRES_PORT:-5432}"

# Validate required environment variables
if [ -z "$DATABASE_URL" ] && [ -z "$POSTGRES_USER" ]; then
    echo "‚ùå Error: DATABASE_URL or POSTGRES_USER must be set"
    exit 1
fi

# Wait for PostgreSQL to be ready
echo "‚è≥ Aguardando PostgreSQL..."
until pg_isready -h ${POSTGRES_HOST:-localhost} -p ${POSTGRES_PORT:-5432} -U ${POSTGRES_USER:-postgres}; do
    echo "   Banco n√£o dispon√≠vel, tentando novamente..."
    sleep 2
done
echo "‚úÖ PostgreSQL dispon√≠vel!"

# Use DATABASE_URL if provided, otherwise construct from parts
if [ -z "$DATABASE_URL" ]; then
    export DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST:-localhost}:${POSTGRES_PORT:-5432}/${POSTGRES_DB}?schema=public"
fi

# CORRE√á√ÉO: Regenerar Prisma Client antes de conectar
echo "üîÑ Regenerando Prisma Client..."
npx prisma generate

# Check database connection with Prisma
echo "Verificando conex√£o com Prisma..."
if ! node -e "
const { PrismaClient } = require('@prisma/client');
new PrismaClient().\$connect()
  .then(() => {
    console.log('Prisma conectado com sucesso!');
    process.exit(0);
  })
  .catch(e => {
    console.error('Erro na conex√£o Prisma:', e.message);
    process.exit(1);
  })
"; then
    echo "Falha na conex√£o com banco via Prisma"
    exit 1
fi

# Create backup if in production
if [ "$NODE_ENV" = "production" ]; then
    echo "Criando backup de seguran√ßa..."
    BACKUP_FILE="/var/lib/postgresql/backups/backup-$(date +%Y%m%d-%H%M%S).sql"
    if pg_dump "${DATABASE_URL}" > "$BACKUP_FILE" 2>/dev/null; then
        echo "Backup criado: $BACKUP_FILE"
        # Compress backup
        gzip "$BACKUP_FILE"
        echo "Backup comprimido: ${BACKUP_FILE}.gz"
    else
        echo "Backup falhou, continuando com migra√ß√µes..."
    fi
fi

# Check migration status
echo "Verificando status das migra√ß√µes..."
if npx prisma migrate status; then
    echo "Status das migra√ß√µes verificado"
else
    echo "Problemas no status das migra√ß√µes, tentando resolver..."
    # MELHORIA: Tentar resolver problemas automaticamente
    npx prisma migrate resolve --applied || echo "N√£o foi poss√≠vel resolver automaticamente"
fi

# Deploy migrations
echo "Executando migra√ß√µes..."
if npx prisma migrate deploy; then
    echo "Migra√ß√µes executadas com sucesso!"
else
    echo "Erro ao executar migra√ß√µes!"
    exit 1
fi

# Seed database if requested or in development
if [ "$RUN_SEED" = "true" ] || [ "$NODE_ENV" = "development" ]; then
    echo "Executando seed do banco..."
    if npx prisma db seed; then
        echo "Seed executado com sucesso!"
    else
        echo "Seed n√£o dispon√≠vel ou falhou, tentando script direto..."
        if [ -f "prisma/seed.js" ]; then
            node prisma/seed.js
        else
            echo "Arquivo seed.js n√£o encontrado"
        fi
    fi
fi

# Final verification
echo "Verifica√ß√£o final da conectividade..."
if node -e "
const { PrismaClient } = require('@prisma/client');
new PrismaClient().\$connect()
  .then(() => {
    console.log('Verifica√ß√£o final: Conex√£o OK');
    process.exit(0);
  })
  .catch(e => {
    console.error('Verifica√ß√£o final falhou:', e.message);
    process.exit(1);
  })
"; then
    echo "Migration container completado com sucesso!"
else
    echo "Verifica√ß√£o final falhou!"
    exit 1
fi
EOF

# Create improved startup script
COPY <<'EOF' /app/start-database.sh
#!/bin/bash
set -e

echo "üöÄ Starting Pro-Mata Database Container..."

# Check if running as migration-only mode
if [ "$MIGRATION_MODE" = "true" ]; then
    echo "üîÑ Running in migration-only mode"
    /app/migrate.sh
    exit 0
fi

# Start PostgreSQL in background
echo "üóÑÔ∏è  Starting PostgreSQL..."
docker-entrypoint.sh postgres &
PG_PID=$!

# Wait for PostgreSQL to be ready with better retry logic
echo "‚è≥ Waiting for PostgreSQL to be ready..."
retry_count=0
max_retries=30
until pg_isready -h localhost -p 5432 -U ${POSTGRES_USER:-postgres} || [ $retry_count -eq $max_retries ]; do
    echo "   PostgreSQL n√£o pronto, tentativa $((retry_count + 1))/$max_retries"
    sleep 2
    retry_count=$((retry_count + 1))
done

if [ $retry_count -eq $max_retries ]; then
    echo "‚ùå PostgreSQL n√£o ficou dispon√≠vel ap√≥s $max_retries tentativas"
    exit 1
fi

# Run migrations if AUTO_MIGRATE is enabled
if [ "$AUTO_MIGRATE" = "true" ]; then
    echo "üîÑ Running automatic migrations..."
    /app/migrate.sh
fi

# Keep PostgreSQL running in foreground
echo "‚úÖ Database ready! PostgreSQL running."
wait $PG_PID
EOF

# Make scripts executable
RUN chmod +x /docker-entrypoint-initdb.d/00-base-init.sh
RUN chmod +x /app/migrate.sh
RUN chmod +x /app/start-database.sh

# Create default directories for extending images
RUN mkdir -p /etc/postgresql/conf.d \
             /var/lib/postgresql/backups \
             /var/lib/postgresql/scripts

# Expose PostgreSQL port
EXPOSE 5432

# Improved health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD pg_isready -h localhost -p 5432 -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres} || exit 1

# Use the startup script as entrypoint
ENTRYPOINT ["/app/start-database.sh"]

# Default command (can be overridden by extending images)
CMD []