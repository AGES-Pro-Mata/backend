# Docker Compose para Produção DNS + TLS (EC2)
# Uso: docker compose -f docker-compose.prod.yml up -d

services:
  # Traefik - Reverse Proxy & SSL
  traefik:
    image: traefik:v3.0
    container_name: promata-traefik
    restart: always
    command:
      # API e Dashboard
      - --api.dashboard=true
      - --api.insecure=true

      # Entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443

      # Provider Docker (não Swarm)
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=promata_public

      # Let's Encrypt com DNS Challenge (Cloudflare)
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=30
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@promata.com.br}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory

      # Logs
      - --log.level=${TRAEFIK_LOG_LEVEL:-INFO}
      - --accesslog=true

    environment:
      # Cloudflare API credentials para DNS Challenge
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}

    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard (proteger em produção)

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt

    networks:
      - promata_public

    labels:
      - traefik.enable=true

      # Redirect HTTP -> HTTPS global
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true

      # Security headers middleware
      - traefik.http.middlewares.security-headers.headers.sslredirect=true
      - traefik.http.middlewares.security-headers.headers.stsSeconds=31536000
      - traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.security-headers.headers.stsPreload=true
      - traefik.http.middlewares.security-headers.headers.forceSTSHeader=true
      - traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true
      - traefik.http.middlewares.security-headers.headers.frameDeny=true

  # Nginx - Proxy para S3 (Frontend)
  frontend-proxy:
    image: nginx:alpine
    container_name: promata-frontend-proxy
    restart: always

    volumes:
      - ./nginx-s3-proxy.conf:/etc/nginx/conf.d/default.conf:ro

    networks:
      - promata_public

    labels:
      - traefik.enable=true
      - traefik.docker.network=promata_public

      # Router HTTPS
      - traefik.http.routers.frontend.rule=Host(`promata.com.br`) || Host(`www.promata.com.br`)
      - traefik.http.routers.frontend.entrypoints=websecure
      - traefik.http.routers.frontend.tls.certresolver=letsencrypt
      - traefik.http.routers.frontend.middlewares=security-headers
      - traefik.http.services.frontend.loadbalancer.server.port=80

    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Backend NestJS
  # Usa imagem publicada pelo CI/CD (ci-cd.yml main branch → tag :latest)
  backend:
    image: ${DOCKER_REGISTRY:-docker.io}/${IMAGE_NAME:-norohim/pro-mata-backend}:${IMAGE_TAG:-latest}
    container_name: ${CONTAINER_NAME:-promata-backend}
    restart: always

    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-2h}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - UMAMI_URL=${UMAMI_URL:-}
      - UMAMI_WEBSITE_ID=${UMAMI_WEBSITE_ID:-}

    networks:
      - promata_public
      - promata_internal

    depends_on:
      database:
        condition: service_healthy
      umami:
        condition: service_started  # Apenas aguarda iniciar, não precisa estar healthy

    labels:
      - traefik.enable=true
      - traefik.docker.network=promata_public

      # Router HTTPS
      - traefik.http.routers.backend.rule=Host(`api.promata.com.br`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls.certresolver=letsencrypt
      - traefik.http.routers.backend.middlewares=security-headers
      - traefik.http.services.backend.loadbalancer.server.port=3000

    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: promata-database
    restart: always

    environment:
      - POSTGRES_DB=${POSTGRES_DB:-promata}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - promata_internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Umami Analytics
  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    container_name: promata-umami
    restart: always

    environment:
      - DATABASE_URL=postgresql://${UMAMI_DB_USER:-umami}:${UMAMI_DB_PASSWORD:-umami}@umami-db:5432/${UMAMI_DB_NAME:-umami}
      - DATABASE_TYPE=postgresql
      - APP_SECRET=${UMAMI_APP_SECRET:-dGhpcy1pcy1hLWRlZmF1bHQtc2VjcmV0LWNoYW5nZS1pbi1wcm9kdWN0aW9u}

    depends_on:
      umami-db:
        condition: service_healthy

    networks:
      - promata_public
      - promata_internal

    labels:
      - traefik.enable=true
      - traefik.docker.network=promata_public

      # Router HTTPS
      - traefik.http.routers.umami.rule=Host(`analytics.promata.com.br`)
      - traefik.http.routers.umami.entrypoints=websecure
      - traefik.http.routers.umami.tls.certresolver=letsencrypt
      - traefik.http.routers.umami.middlewares=security-headers
      - traefik.http.services.umami.loadbalancer.server.port=3000

    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/heartbeat || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s  # Dar mais tempo para Umami inicializar

  # Umami Database
  umami-db:
    image: postgres:15-alpine
    container_name: promata-umami-db
    restart: always

    environment:
      - POSTGRES_DB=${UMAMI_DB_NAME:-umami}
      - POSTGRES_USER=${UMAMI_DB_USER:-umami}
      - POSTGRES_PASSWORD=${UMAMI_DB_PASSWORD:-umami}

    volumes:
      - umami_db_data:/var/lib/postgresql/data

    networks:
      - promata_internal

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${UMAMI_DB_USER:-umami} -d ${UMAMI_DB_NAME:-umami}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Metabase
  metabase:
    image: metabase/metabase:latest
    container_name: promata-metabase
    restart: always

    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=${METABASE_DB_NAME:-metabase}
      - MB_DB_PORT=5432
      - MB_DB_USER=${METABASE_DB_USER:-metabase}
      - MB_DB_PASS=${METABASE_DB_PASSWORD:-metabase123}
      - MB_DB_HOST=metabase-db

    depends_on:
      metabase-db:
        condition: service_healthy

    networks:
      - promata_public
      - promata_internal

    labels:
      - traefik.enable=true
      - traefik.docker.network=promata_public

      # Router HTTPS
      - traefik.http.routers.metabase.rule=Host(`metabase.promata.com.br`)
      - traefik.http.routers.metabase.entrypoints=websecure
      - traefik.http.routers.metabase.tls.certresolver=letsencrypt
      - traefik.http.routers.metabase.middlewares=security-headers
      - traefik.http.services.metabase.loadbalancer.server.port=3000

    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Metabase Database
  metabase-db:
    image: postgres:15-alpine
    container_name: promata-metabase-db
    restart: always

    environment:
      - POSTGRES_DB=${METABASE_DB_NAME:-metabase}
      - POSTGRES_USER=${METABASE_DB_USER:-metabase}
      - POSTGRES_PASSWORD=${METABASE_DB_PASSWORD:-metabase123}

    volumes:
      - metabase_db_data:/var/lib/postgresql/data

    networks:
      - promata_internal

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${METABASE_DB_USER:-metabase} -d ${METABASE_DB_NAME:-metabase}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prisma Studio
  prisma-studio:
    image: node:18-alpine
    container_name: promata-prisma-studio
    restart: unless-stopped

    environment:
      - DATABASE_URL=${DATABASE_URL}

    volumes:
      - .:/app
      - backend_node_modules:/app/node_modules

    working_dir: /app

    command: sh -c "npx prisma migrate deploy && npx prisma studio --hostname 0.0.0.0 --port 5555"

    depends_on:
      database:
        condition: service_healthy

    networks:
      - promata_public
      - promata_internal

    labels:
      - traefik.enable=true
      - traefik.docker.network=promata_public

      # Router HTTPS
      - traefik.http.routers.prisma-studio.rule=Host(`prisma.promata.com.br`)
      - traefik.http.routers.prisma-studio.entrypoints=websecure
      - traefik.http.routers.prisma-studio.tls.certresolver=letsencrypt
      - traefik.http.routers.prisma-studio.middlewares=security-headers
      - traefik.http.services.prisma-studio.loadbalancer.server.port=5555

volumes:
  traefik_letsencrypt:
    name: promata-traefik-letsencrypt
  postgres_data:
    name: promata-postgres-data
    external: true  # Volume criado pela migração automática
  # Reutilizar volumes existentes do setup antigo
  umami_db_data:
    name: umami-db-data
    external: true
  metabase_db_data:
    name: metabase-db-data
    external: true
  backend_node_modules:
    name: promata-backend-node-modules

networks:
  promata_public:
    name: promata_public
    driver: bridge
  promata_internal:
    name: promata_internal
    driver: bridge
