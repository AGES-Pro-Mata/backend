services:
  # Development Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: promata-backend
    environment:
      - NODE_ENV=development
      - PORT=${BACKEND_PORT:-3000}
      - DATABASE_URL=${DATABASE_URL}
      - CHOKIDAR_USEPOLLING=true
      - UMAMI_URL=${UMAMI_URL}
      - UMAMI_WEBSITE_ID=${UMAMI_WEBSITE_ID}
    ports:
      - ${BACKEND_PORT:-3000}:${BACKEND_PORT:-3000}
    volumes:
      - .:/app
      - backend_node_modules:/app/node_modules
      - /app/generated
    networks:
      - promata_dev
    depends_on:
      database:
        condition: service_healthy
      umami:
        condition: service_healthy
    restart: unless-stopped
    command: sh -c "npx prisma migrate deploy && npm run start:dev"
    healthcheck:
      test: ["CMD", "curl", "-f", "${BACKEND_DEV_HEALTHCHECK_URL:-http://localhost:3000/health}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  metabase:
    image: metabase/metabase:latest
    container_name: promata-metabase
    ports:
      - "3001:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: metabase
      MB_DB_PASS: metabase123
      MB_DB_HOST: metabase-db
    depends_on:
      metabase-db:
        condition: service_healthy
    restart: always
    networks:
      - promata_dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Metabase Database
  metabase-db:
    image: postgres:15-alpine
    container_name: promata-metabase-db
    ports:
      - "5052:5432"
    environment:
      POSTGRES_DB: metabase
      POSTGRES_USER: metabase
      POSTGRES_PASSWORD: metabase123
    volumes:
      - metabase-db-data:/var/lib/postgresql/data
    restart: always
    networks:
      - promata_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5


  # Database para desenvolvimento
  database:
    image: postgres:15-alpine
    container_name: promata-database
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-promata}
      - POSTGRES_USER=${POSTGRES_USER:-promata}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-promata123}
    ports:
      - "${DATABASE_PORT_MAPPING:-5432:5432}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - promata_dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-promata}"]
      interval: 10s
      timeout: 5s
      retries: 5
  # Umami Analytics
  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    container_name: promata-umami
    ports:
      - "5050:3000"
    environment:
      DATABASE_URL: postgresql://umami:umami@umami-db:5432/umami
      DATABASE_TYPE: postgresql
    depends_on:
      umami-db:
        condition: service_healthy
    init: true
    restart: always
    networks:
      - promata_dev
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/api/heartbeat"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Umami Database
  umami-db:
    image: postgres:15-alpine
    container_name: promata-umami-db
    ports:
      - "5051:5432"
    environment:
      POSTGRES_DB: umami
      POSTGRES_USER: umami
      POSTGRES_PASSWORD: umami
    volumes:
      - umami-db-data:/var/lib/postgresql/data
    restart: always
    networks:
      - promata_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Prisma Studio
  prisma-studio:
    image: node:18-alpine
    container_name: promata-prisma-studio
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - .:/app
      - backend_node_modules:/app/node_modules
    working_dir: /app
    command: sh -c "npx prisma migrate deploy && npx prisma studio --hostname 0.0.0.0 --port 5555"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - promata_dev
    restart: unless-stopped

volumes:
  backend_node_modules:
    name: promata-backend-node-modules
  postgres_data:
    name: promata-postgres-data
  metabase-db-data:
    name: promata-metabase-db-data
  umami-db-data:
    name: promata-umami-db-data

networks:
  promata_dev:
    name: promata-network-dev
    driver: bridge
