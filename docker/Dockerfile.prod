# Multi-stage build for Spring Boot application
FROM maven:3.8.6-openjdk-17-slim AS builder

# Set working directory
WORKDIR /app

# Copy Maven files for dependency resolution
COPY pom.xml .
COPY .mvn/ .mvn/
COPY mvnw .

# Download dependencies (cached layer)
RUN ./mvnw dependency:go-offline -B

# Copy source code
COPY src ./src

# Build application
RUN ./mvnw clean package -DskipTests -B

# Extract JAR layers for better caching
RUN java -Djarmode=layertools -jar target/*.jar extract

# Runtime stage
FROM openjdk:17-jre-slim

# Install security updates and required packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r promata && useradd -r -g promata promata

# Set working directory
WORKDIR /app

# Copy application layers from builder stage
COPY --from=builder --chown=promata:promata app/dependencies/ ./
COPY --from=builder --chown=promata:promata app/spring-boot-loader/ ./
COPY --from=builder --chown=promata:promata app/snapshot-dependencies/ ./
COPY --from=builder --chown=promata:promata app/application/ ./

# Copy startup script
COPY --chown=promata:promata scripts/start.sh ./start.sh
RUN chmod +x ./start.sh

# Switch to non-root user
USER promata

# Expose application port
EXPOSE 8080

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8080/actuator/health || exit 1

# Set JVM options for containerized environment
ENV JAVA_OPTS="-XX:+UseContainerSupport \
               -XX:MaxRAMPercentage=75.0 \
               -XX:+UseG1GC \
               -XX:+UseStringDeduplication \
               -Djava.security.egd=file:/dev/./urandom"

# Start application
ENTRYPOINT ["sh", "./start.sh"]